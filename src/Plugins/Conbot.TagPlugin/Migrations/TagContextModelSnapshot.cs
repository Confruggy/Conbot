// <auto-generated />
using System;
using Conbot.TagPlugin;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Conbot.TagPlugin.Migrations
{
    [DbContext(typeof(TagContext))]
    partial class TagContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5");

            modelBuilder.Entity("Conbot.TagPlugin.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ulong>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasAlternateKey("GuildId", "Name");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Conbot.TagPlugin.TagAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ulong>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasAlternateKey("GuildId", "Name");

                    b.HasIndex("TagId");

                    b.ToTable("TagAliases");
                });

            modelBuilder.Entity("Conbot.TagPlugin.TagAliasCreation", b =>
                {
                    b.Property<int>("TagAliasId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("ChannelId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<ulong?>("GuildId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("MessageId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TagAliasId");

                    b.ToTable("TagAliasCreations");
                });

            modelBuilder.Entity("Conbot.TagPlugin.TagCreation", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("ChannelId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<ulong?>("GuildId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("MessageId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TagId");

                    b.ToTable("TagCreations");
                });

            modelBuilder.Entity("Conbot.TagPlugin.TagModification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("ChannelId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("GuildId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("MessageId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("NewContent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OldContent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.ToTable("TagModifications");
                });

            modelBuilder.Entity("Conbot.TagPlugin.TagUse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("ChannelId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("GuildId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("MessageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UsedAliasId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UsedAt")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("UsedAliasId");

                    b.ToTable("TagUses");
                });

            modelBuilder.Entity("Conbot.TagPlugin.TagAlias", b =>
                {
                    b.HasOne("Conbot.TagPlugin.Tag", "Tag")
                        .WithMany("Aliases")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Conbot.TagPlugin.TagAliasCreation", b =>
                {
                    b.HasOne("Conbot.TagPlugin.TagAlias", "TagAlias")
                        .WithOne("Creation")
                        .HasForeignKey("Conbot.TagPlugin.TagAliasCreation", "TagAliasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Conbot.TagPlugin.TagCreation", b =>
                {
                    b.HasOne("Conbot.TagPlugin.Tag", "Tag")
                        .WithOne("Creation")
                        .HasForeignKey("Conbot.TagPlugin.TagCreation", "TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Conbot.TagPlugin.TagModification", b =>
                {
                    b.HasOne("Conbot.TagPlugin.Tag", "Tag")
                        .WithMany("Modifications")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Conbot.TagPlugin.TagUse", b =>
                {
                    b.HasOne("Conbot.TagPlugin.Tag", "Tag")
                        .WithMany("Uses")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conbot.TagPlugin.TagAlias", "UsedAlias")
                        .WithMany("TagUses")
                        .HasForeignKey("UsedAliasId");
                });
#pragma warning restore 612, 618
        }
    }
}
